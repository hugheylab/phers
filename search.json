[{"path":"https://phers.hugheylab.org/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jake Hughey. Author, maintainer. Layla Aref. Author.","code":""},{"path":"https://phers.hugheylab.org/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hughey J, Aref L (2022). phers: Calculate Phenotype Risk Scores. https://phers.hugheylab.org, https://github.com/hugheylab/phers.","code":"@Manual{,   title = {phers: Calculate Phenotype Risk Scores},   author = {Jake Hughey and Layla Aref},   year = {2022},   note = {https://phers.hugheylab.org, https://github.com/hugheylab/phers}, }"},{"path":"https://phers.hugheylab.org/index.html","id":"phers","dir":"","previous_headings":"","what":"Calculate Phenotype Risk Scores ","title":"Calculate Phenotype Risk Scores ","text":"phers R package calculating phenotype risk scores, quantify extent person’s clinical diagnoses resemble given Mendelian disease. details R package, see Aref et al. (2022). details original application phenotype risk scores, see Bastarache et al. (2018).","code":""},{"path":[]},{"path":"https://phers.hugheylab.org/index.html","id":"option-1-cran","dir":"","previous_headings":"Installation","what":"Option 1: CRAN","title":"Calculate Phenotype Risk Scores ","text":"","code":"install.packages('phers')"},{"path":"https://phers.hugheylab.org/index.html","id":"option-2-hughey-lab-drat-repository","dir":"","previous_headings":"Installation","what":"Option 2: Hughey Lab Drat Repository","title":"Calculate Phenotype Risk Scores ","text":"Install BiocManager. use RStudio, go Tools → Global Options… → Packages → Add… (Secondary repositories), enter: Name: hugheylab Url: https://hugheylab.github.io/drat/ . can install update package entering: Alternatively, can install update package entering:","code":"if (!requireNamespace('BiocManager', quietly = TRUE))   install.packages('BiocManager') BiocManager::install('phers') BiocManager::install('phers', site_repository = 'https://hugheylab.github.io/drat/')"},{"path":"https://phers.hugheylab.org/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Calculate Phenotype Risk Scores ","text":"Check reference documentation.","code":""},{"path":"https://phers.hugheylab.org/reference/demoSample.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample table of demographic information — demoSample","title":"Sample table of demographic information — demoSample","text":"data artificial correspond real patients.","code":""},{"path":"https://phers.hugheylab.org/reference/demoSample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample table of demographic information — demoSample","text":"","code":"demoSample"},{"path":"https://phers.hugheylab.org/reference/demoSample.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample table of demographic information — demoSample","text":"data table following columns: person_id: Character vector identifier person cohort sex: Character vector indicating biological sex","code":""},{"path":[]},{"path":"https://phers.hugheylab.org/reference/diseaseDxIcdMap.html","id":null,"dir":"Reference","previous_headings":"","what":"Mapping of diseases and diagnostic ICD codes — diseaseDxIcdMap","title":"Mapping of diseases and diagnostic ICD codes — diseaseDxIcdMap","text":"table provides mapping 27 Mendelian diseases corresponding ICD-9 ICD-10 codes indicate genetic diagnosis.","code":""},{"path":"https://phers.hugheylab.org/reference/diseaseDxIcdMap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mapping of diseases and diagnostic ICD codes — diseaseDxIcdMap","text":"","code":"diseaseDxIcdMap"},{"path":"https://phers.hugheylab.org/reference/diseaseDxIcdMap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Mapping of diseases and diagnostic ICD codes — diseaseDxIcdMap","text":"data.table following columns: disease_id: Numeric vector OMIM disease identifiers disease_name: Character vector disease names icd: Character vector ICD codes indicating genetic diagnosis flag: Integer vector vocabulary ICD code (9: ICD-9-CM,  10: ICD-10-CM) icd_name: Character vector containing description ICD code","code":""},{"path":[]},{"path":"https://phers.hugheylab.org/reference/diseaseHpoMap.html","id":null,"dir":"Reference","previous_headings":"","what":"Mapping of Mendelian diseases and their clinical features — diseaseHpoMap","title":"Mapping of Mendelian diseases and their clinical features — diseaseHpoMap","text":"table provides mapping Mendelian diseases clinical features, represented Human Phenotype Ontology (HPO) terms. mapping based annotations Online Mendelian Inheritance Man (OMIM).","code":""},{"path":"https://phers.hugheylab.org/reference/diseaseHpoMap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mapping of Mendelian diseases and their clinical features — diseaseHpoMap","text":"","code":"diseaseHpoMap"},{"path":"https://phers.hugheylab.org/reference/diseaseHpoMap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Mapping of Mendelian diseases and their clinical features — diseaseHpoMap","text":"data.table following columns: disease_id: Numeric vector OMIM disease identifiers disease_name: Character vector disease names hpo_term_id: Character vector HPO identifiers corresponding disease's clinical features hpo_term_name: Character vector HPO term descriptions","code":""},{"path":"https://phers.hugheylab.org/reference/diseaseHpoMap.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mapping of Mendelian diseases and their clinical features — diseaseHpoMap","text":"https://hpo.jax.org/app/download/annotation","code":""},{"path":[]},{"path":"https://phers.hugheylab.org/reference/getDxStatus.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify cases and controls for Mendelian diseases — getDxStatus","title":"Identify cases and controls for Mendelian diseases — getDxStatus","text":"function useful verifying raw residual phenotype risk scores diagnosed individuals (cases) tend higher scores undiagnosed individuals (controls).","code":""},{"path":"https://phers.hugheylab.org/reference/getDxStatus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify cases and controls for Mendelian diseases — getDxStatus","text":"","code":"getDxStatus(   demos,   icdOccurrences,   minUniqueAges = 2L,   diseaseDxIcdMap = phers::diseaseDxIcdMap )"},{"path":"https://phers.hugheylab.org/reference/getDxStatus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify cases and controls for Mendelian diseases — getDxStatus","text":"demos data.table one row per person cohort. Must column person_id. icdOccurrences data.table occurrences ICD codes person cohort. Must columns person_id, icd, flag, occurrence_age. minUniqueAges Integer indicating minimum number unique ICD code entry ages required classify person case. Persons least one, fewer minUniqueAges entry ages, assigned neither cases controls. diseaseDxIcdMap data.table mapping diseases corresponding ICD codes indicate diagnosis. Must columns disease_id, icd, flag. Default diseaseDxIcdMap.","code":""},{"path":"https://phers.hugheylab.org/reference/getDxStatus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify cases and controls for Mendelian diseases — getDxStatus","text":"data.table columns person_id, disease_id, dx_status (1 indicates case, 0 indicates control, -1 indicates neither).","code":""},{"path":"https://phers.hugheylab.org/reference/getDxStatus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify cases and controls for Mendelian diseases — getDxStatus","text":"","code":"library('data.table')   icdSample1 = merge(icdSample, demoSample[, .(person_id, dob)], by = 'person_id') icdSample1[, occurrence_age := as.numeric((entry_date - dob)/365.25)] #>      person_id    icd flag entry_date        dob occurrence_age #>   1:         1    365    9 2008-02-22 1999-09-03       8.472154 #>   2:         1    366    9 2006-02-15 1999-09-03       6.454358 #>   3:         1    734    9 2009-11-05 1999-09-03      10.175097 #>   4:         1 759.82    9 2006-09-08 1999-09-03       7.015617 #>   5:         2    441    9 2014-07-06 1995-09-26      18.777409 #>  ---                                                            #> 149:        48  741.0    9 2007-08-29 1992-01-04      15.649146 #> 150:        48 803.50    9 2010-10-20 1992-01-04      18.792199 #> 151:        49  474.8    9 2014-07-25 1999-10-21      14.759346 #> 152:        49  494.0    9 2014-07-25 1999-10-21      14.759346 #> 153:        49 E933.8    9 2014-07-25 1999-10-21      14.759346 icdSample1[, `:=`(entry_date = NULL, dob = NULL)] #>      person_id    icd flag occurrence_age #>   1:         1    365    9       8.472154 #>   2:         1    366    9       6.454358 #>   3:         1    734    9      10.175097 #>   4:         1 759.82    9       7.015617 #>   5:         2    441    9      18.777409 #>  ---                                      #> 149:        48  741.0    9      15.649146 #> 150:        48 803.50    9      18.792199 #> 151:        49  474.8    9      14.759346 #> 152:        49  494.0    9      14.759346 #> 153:        49 E933.8    9      14.759346  dxStatus = getDxStatus(demoSample, icdSample1)"},{"path":"https://phers.hugheylab.org/reference/getGeneticAssociations.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform association tests between phenotype risk scores and genotypes — getGeneticAssociations","title":"Perform association tests between phenotype risk scores and genotypes — getGeneticAssociations","text":"association test disease-variant pair based linear model, phenotype risk score dependent variable.","code":""},{"path":"https://phers.hugheylab.org/reference/getGeneticAssociations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform association tests between phenotype risk scores and genotypes — getGeneticAssociations","text":"","code":"getGeneticAssociations(   scores,   genotypes,   demos,   diseaseVariantMap,   lmFormula,   modelType = c(\"genotypic\", \"additive\", \"dominant\", \"recessive\"),   level = 0.95,   dopar = FALSE )"},{"path":"https://phers.hugheylab.org/reference/getGeneticAssociations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform association tests between phenotype risk scores and genotypes — getGeneticAssociations","text":"scores data.table phenotype risk scores. Must columns person_id, disease_id, score. genotypes matrix 'BEDMatrix' object containing genetic data, rownames corresponding person_ids demos scores, colnames corresponding variant_ids diseaseVariantMap. demos data.table characteristics person cohort. Must column person_id. diseaseVariantMap data.table indicating genetic variants test association phenotype risk scores diseases. Must columns disease_id variant_id. lmFormula formula representing linear model (excluding term genotype) use association tests. terms formula must correspond columns demos. modelType string indicating encode genotype model. level number indicating level confidence interval. Default 0.95. dopar Logical indicating whether run calculations parallel parallel backend already set , e.g., using doParallel::registerDoParallel(). Recommended minimize runtime.","code":""},{"path":"https://phers.hugheylab.org/reference/getGeneticAssociations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform association tests between phenotype risk scores and genotypes — getGeneticAssociations","text":"data.table statistics association tests (model fails converge, NAs reported): disease_id: Disease identifier variant_id: Variant identifier n_total: Number persons non-missing genotype data given variant. n_wt: Number persons homozygous wild-type allele. n_het: Number persons one copy alternate allele. n_hom: Number persons homozygous alternate allele. beta: Coefficient association genotype score se: Standard error beta pval: P-value beta non-zero ci_lower: Lower bound confidence interval beta ci_upper: Upper bound confidence interval beta modelType \"genotypic\", data.table include separate statistics heterozygous homozygous genotypes.","code":""},{"path":[]},{"path":"https://phers.hugheylab.org/reference/getGeneticAssociations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform association tests between phenotype risk scores and genotypes — getGeneticAssociations","text":"","code":"library('data.table') library('BEDMatrix')  # map ICD codes to phecodes phecodeOccurrences = getPhecodeOccurrences(icdSample)  # calculate weights weights = getWeights(demoSample, phecodeOccurrences)  # OMIM disease IDs for which to calculate phenotype risk scores diseaseId = 154700  # map diseases to phecodes diseasePhecodeMap = mapDiseaseToPhecode()  # calculate scores scores = getScores(weights, diseasePhecodeMap[disease_id == diseaseId])  # map diseases to genetic variants nvar = 10 diseaseVariantMap = data.table(disease_id = diseaseId, variant_id = paste0('snp', 1:nvar))  # load sample genetic data npop = 50 genoSample = BEDMatrix(system.file('extdata', 'geno_sample.bed', package = 'phers')) #> Extracting number of samples and rownames from geno_sample.fam... #> Extracting number of variants and colnames from geno_sample.bim... colnames(genoSample) = paste0('snp', 1:nvar) rownames(genoSample) = 1:npop  # run genetic association tests genoStats = getGeneticAssociations(   scores, genoSample, demoSample, diseaseVariantMap, lmFormula = ~ sex,   modelType = 'additive')"},{"path":"https://phers.hugheylab.org/reference/getPhecodeOccurrences.html","id":null,"dir":"Reference","previous_headings":"","what":"Map ICD code occurrences to phecode occurrences — getPhecodeOccurrences","title":"Map ICD code occurrences to phecode occurrences — getPhecodeOccurrences","text":"typically first step analysis using phenotype risk scores, next getWeights().","code":""},{"path":"https://phers.hugheylab.org/reference/getPhecodeOccurrences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map ICD code occurrences to phecode occurrences — getPhecodeOccurrences","text":"","code":"getPhecodeOccurrences(   icdOccurrences,   icdPhecodeMap = phers::icdPhecodeMap,   dxIcd = phers::diseaseDxIcdMap )"},{"path":"https://phers.hugheylab.org/reference/getPhecodeOccurrences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map ICD code occurrences to phecode occurrences — getPhecodeOccurrences","text":"icdOccurrences data.table occurrences ICD codes person cohort. Must columns person_id, icd, flag. icdPhecodeMap data.table mapping ICD codes phecodes. Must columns icd, phecode, flag. Default map included package. dxIcd data.table ICD codes exclude mapping phecodes. Must columns icd flag. Default table Mendelian diseases corresponding ICD codes indicate genetic diagnosis. NULL, ICD codes excluded.","code":""},{"path":"https://phers.hugheylab.org/reference/getPhecodeOccurrences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map ICD code occurrences to phecode occurrences — getPhecodeOccurrences","text":"data.table phecode occurrences person.","code":""},{"path":[]},{"path":"https://phers.hugheylab.org/reference/getPhecodeOccurrences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map ICD code occurrences to phecode occurrences — getPhecodeOccurrences","text":"","code":"library('data.table')  # map ICD codes to phecodes phecodeOccurrences = getPhecodeOccurrences(icdSample)  # calculate weights (using the prevalence method) weights = getWeights(demoSample, phecodeOccurrences)  # OMIM disease IDs for which to calculate phenotype risk scores diseaseId = 154700  # map diseases to phecodes diseasePhecodeMap = mapDiseaseToPhecode()  # calculate scores scores = getScores(weights, diseasePhecodeMap[disease_id == diseaseId])  # calculate residual scores rscores = getResidualScores(demoSample, scores, lmFormula = ~ sex)"},{"path":"https://phers.hugheylab.org/reference/getResidualScores.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate residual phenotype risk scores — getResidualScores","title":"Calculate residual phenotype risk scores — getResidualScores","text":"residual score indicates extent person's phenotype risk score given disease deviates expected score, adjusting person's characteristics linear model.","code":""},{"path":"https://phers.hugheylab.org/reference/getResidualScores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate residual phenotype risk scores — getResidualScores","text":"","code":"getResidualScores(demos, scores, lmFormula)"},{"path":"https://phers.hugheylab.org/reference/getResidualScores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate residual phenotype risk scores — getResidualScores","text":"demos data.table characteristics person cohort. Must column person_id. scores data.table containing phenotype risk score person disease. Must columns person_id, disease_id, score. lmFormula formula representing linear model use calculating residual scores. terms formula must correspond columns demos.","code":""},{"path":"https://phers.hugheylab.org/reference/getResidualScores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate residual phenotype risk scores — getResidualScores","text":"data.table, based scores, additional column resid_score. Residual scores disease standardized unit variance.","code":""},{"path":[]},{"path":"https://phers.hugheylab.org/reference/getResidualScores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate residual phenotype risk scores — getResidualScores","text":"","code":"library('data.table')  # map ICD codes to phecodes phecodeOccurrences = getPhecodeOccurrences(icdSample)  # calculate weights (using the prevalence method) weights = getWeights(demoSample, phecodeOccurrences)  # OMIM disease IDs for which to calculate phenotype risk scores diseaseId = 154700  # map diseases to phecodes diseasePhecodeMap = mapDiseaseToPhecode()  # calculate scores scores = getScores(weights, diseasePhecodeMap[disease_id == diseaseId])  # calculate residual scores rscores = getResidualScores(demoSample, scores, lmFormula = ~ sex)"},{"path":"https://phers.hugheylab.org/reference/getScores.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate phenotype risk scores — getScores","title":"Calculate phenotype risk scores — getScores","text":"person's phenotype risk score given disease corresponds sum weights disease-relevant phecodes person received.","code":""},{"path":"https://phers.hugheylab.org/reference/getScores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate phenotype risk scores — getScores","text":"","code":"getScores(weights, diseasePhecodeMap)"},{"path":"https://phers.hugheylab.org/reference/getScores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate phenotype risk scores — getScores","text":"weights data.table phecodes corresponding weights. Must columns person_id, phecode w. diseasePhecodeMap data.table mapping diseases phecodes. Must columns disease_id phecode.","code":""},{"path":"https://phers.hugheylab.org/reference/getScores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate phenotype risk scores — getScores","text":"data.table containing phenotype risk score person disease.","code":""},{"path":[]},{"path":"https://phers.hugheylab.org/reference/getScores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate phenotype risk scores — getScores","text":"","code":"library('data.table')  # map ICD codes to phecodes phecodeOccurrences = getPhecodeOccurrences(icdSample)  # calculate weights (using the prevalence method) weights = getWeights(demoSample, phecodeOccurrences)  # OMIM disease IDs for which to calculate phenotype risk scores diseaseId = 154700  # map diseases to phecodes diseasePhecodeMap = mapDiseaseToPhecode()  # calculate scores scores = getScores(weights, diseasePhecodeMap[disease_id == diseaseId])  # calculate residual scores rscores = getResidualScores(demoSample, scores, lmFormula = ~ sex)"},{"path":"https://phers.hugheylab.org/reference/getWeights.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate phecode-specific weights for phenotype risk scores — getWeights","title":"Calculate phecode-specific weights for phenotype risk scores — getWeights","text":"typically second step analysis using phenotype risk scores, next getScores().","code":""},{"path":"https://phers.hugheylab.org/reference/getWeights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate phecode-specific weights for phenotype risk scores — getWeights","text":"","code":"getWeights(   demos,   phecodeOccurrences,   method = c(\"prevalence\", \"logistic\", \"cox\", \"loglinear\", \"prevalence_precalc\"),   methodFormula = NULL,   negativeWeights = FALSE,   dopar = FALSE )"},{"path":"https://phers.hugheylab.org/reference/getWeights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate phecode-specific weights for phenotype risk scores — getWeights","text":"demos data.table one row per person cohort. Must column person_id. cox method used, demos must columns first_age last_age corresponding first last age visit (years). phecodeOccurrences data.table phecode occurrences person cohort. Must columns person_id phecode \"prevalence\" \"logistic\" methods, columns person_id, phecode, num_occurrences \"loglinear\" method, columns person_id, phecode, occurrence_age \"cox\" method. num_occurrences refers number unique dates phecode recorded person. occurrence_age refers first age (years) person acquired phecode. method string indicating statistical model calculating weights. methodFormula formula representing right-hand side model corresponding method. terms formula must correspond columns demos. method formula required \"prevalence\" \"prevalence_precalc\" methods. use age-related covariates \"cox\" method. negativeWeights Logical indicating whether allow negative weights individuals occurrences phecode. option required \"loglinear\" method since method, individuals nonzero phecode occurrence can also negative weights. dopar Logical indicating whether run calculations parallel parallel backend already set , e.g., using doParallel::registerDoParallel(). Recommended minimize runtime.","code":""},{"path":"https://phers.hugheylab.org/reference/getWeights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate phecode-specific weights for phenotype risk scores — getWeights","text":"data.table columns person_id, phecode, pred, w. column pred represents different quantity depending method. \"prevalence\" method, fraction cohort least one occurrence given phecode. \"prevalence_precalc\" method similar \"prevalence\" method pred calculated based EHR data Vanderbilt University Medical Center. \"logistic\" \"cox\" method, predicted probability given individual given phecode based methodFormula. \"loglinear\" method, predicted log2(num_occurrences + 1) given phecode given individual based methodFormula. \"prevalence\", \"prevalence_precalc\", \"cox\", \"logistic\" methods, weight calculated -log10(pred) individual non-zero phecode occurrence log10(1 - pred) individual zero phecode occurrence. \"loglinear\" method weight calculated difference observed log2(num_occurrences + 1) pred.","code":""},{"path":[]},{"path":"https://phers.hugheylab.org/reference/getWeights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate phecode-specific weights for phenotype risk scores — getWeights","text":"","code":"library('data.table') library('survival')  # map ICD codes to phecodes phecodeOccurrences = getPhecodeOccurrences(icdSample)  # calculate weights using the prevalence method weightsPrev = getWeights(demoSample, phecodeOccurrences)  # calculate weights using the prevalence method # (assign negative weights to those with zero phecode occurrence) weightsPrevNeg = getWeights(   demoSample, phecodeOccurrences, negativeWeights = TRUE)  # calculate weights using the logistic method weightsLogistic = getWeights(   demoSample, phecodeOccurrences, method = 'logistic', methodFormula = ~ sex)  # calculate weights using the loglinear method phecodeOccurrences2 = phecodeOccurrences[, .(   num_occurrences = uniqueN(entry_date)), by = .(person_id, phecode)] weightsLoglinear = getWeights(   demoSample, phecodeOccurrences2, method = 'loglinear', methodFormula = ~ sex)  # calculate weights using the cox method phecodeOccurrences3 = phecodeOccurrences[, .(   first_occurrence_date = min(entry_date)) , by = .(person_id, phecode)] phecodeOccurrences3 = merge(   phecodeOccurrences3, demoSample[, .(person_id, dob)], by = 'person_id') phecodeOccurrences3[,   occurrence_age := as.numeric((first_occurrence_date - dob)/365.25)] #>      person_id phecode first_occurrence_date        dob occurrence_age #>   1:         1     365            2008-02-22 1999-09-03       8.472154 #>   2:         1     366            2006-02-15 1999-09-03       6.454358 #>   3:         1     735            2009-11-05 1999-09-03      10.175097 #>   4:         1   735.1            2009-11-05 1999-09-03      10.175097 #>   5:         2     442            2014-07-06 1995-09-26      18.777409 #>  ---                                                                   #> 252:        49     474            2014-07-25 1999-10-21      14.759346 #> 253:        49   474.2            2014-07-25 1999-10-21      14.759346 #> 254:        49     496            2014-07-25 1999-10-21      14.759346 #> 255:        49   496.3            2014-07-25 1999-10-21      14.759346 #> 256:        49     963            2014-07-25 1999-10-21      14.759346 phecodeOccurrences3[, `:=`(first_occurrence_date = NULL, dob = NULL)] #>      person_id phecode occurrence_age #>   1:         1     365       8.472154 #>   2:         1     366       6.454358 #>   3:         1     735      10.175097 #>   4:         1   735.1      10.175097 #>   5:         2     442      18.777409 #>  ---                                  #> 252:        49     474      14.759346 #> 253:        49   474.2      14.759346 #> 254:        49     496      14.759346 #> 255:        49   496.3      14.759346 #> 256:        49     963      14.759346 demoSample3 = demoSample[, .(   person_id, sex,   first_age = as.numeric((first_visit_date - dob)/365.25),   last_age = as.numeric((last_visit_date - dob)/365.25))] weightsCox = getWeights(   demoSample3, phecodeOccurrences3, method = 'cox', methodFormula = ~ sex) #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Ran out of iterations and did not converge #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Ran out of iterations and did not converge #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.   # calculate weights using pre-calculated weights based on data from # Vanderbilt University Medical Center weightsPreCalc = getWeights(   demoSample, phecodeOccurrences, method = 'prevalence_precalc')"},{"path":"https://phers.hugheylab.org/reference/hpoPhecodeMap.html","id":null,"dir":"Reference","previous_headings":"","what":"Mapping of HPO terms and phecodes — hpoPhecodeMap","title":"Mapping of HPO terms and phecodes — hpoPhecodeMap","text":"table provides mapping Human Phenotype Ontology (HPO) terms phecodes, useful using phecodes represent clinical features Mendelian diseases (version 1.2).","code":""},{"path":"https://phers.hugheylab.org/reference/hpoPhecodeMap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mapping of HPO terms and phecodes — hpoPhecodeMap","text":"","code":"hpoPhecodeMap"},{"path":"https://phers.hugheylab.org/reference/hpoPhecodeMap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Mapping of HPO terms and phecodes — hpoPhecodeMap","text":"data.table following columns: hpo_term_id: Character vector HPO term identifiers hpo_term_name: Character vector HPO term descriptions phecode: Character vector phecodes phecode_name: Character vector phecode descriptions","code":""},{"path":[]},{"path":"https://phers.hugheylab.org/reference/icdPhecodeMap.html","id":null,"dir":"Reference","previous_headings":"","what":"Mapping of ICD codes and phecodes — icdPhecodeMap","title":"Mapping of ICD codes and phecodes — icdPhecodeMap","text":"table provides mapping International Classification Diseases 9th 10th revisions (ICD-9-CM ICD-10-CM) phecodes (version 1.2).","code":""},{"path":"https://phers.hugheylab.org/reference/icdPhecodeMap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mapping of ICD codes and phecodes — icdPhecodeMap","text":"","code":"icdPhecodeMap"},{"path":"https://phers.hugheylab.org/reference/icdPhecodeMap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Mapping of ICD codes and phecodes — icdPhecodeMap","text":"data.table following columns: icd: Character vector ICD codes flag: Integer vector vocabulary ICD code (9: ICD-9-CM,  10: ICD-10-CM) icd_name: Character vector ICD code descriptions phecode: Character vector phecodes phecode_name: Character vector phecode descriptions","code":""},{"path":"https://phers.hugheylab.org/reference/icdPhecodeMap.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mapping of ICD codes and phecodes — icdPhecodeMap","text":"https://phewascatalog.org/phecodes","code":""},{"path":[]},{"path":"https://phers.hugheylab.org/reference/icdSample.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample table of ICD occurrences — icdSample","title":"Sample table of ICD occurrences — icdSample","text":"data artificial correspond real patients.","code":""},{"path":"https://phers.hugheylab.org/reference/icdSample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample table of ICD occurrences — icdSample","text":"","code":"icdSample"},{"path":"https://phers.hugheylab.org/reference/icdSample.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample table of ICD occurrences — icdSample","text":"data.table following columns: person_id: Character vector identifier person icd: Character vector ICD codes recorded person flag: Integer vector vocabulary ICD code (9: ICD-9-CM, 10: ICD-10-CM) entry_date: Vector type Date indicating date ICD code recorded.","code":""},{"path":[]},{"path":"https://phers.hugheylab.org/reference/mapDiseaseToPhecode.html","id":null,"dir":"Reference","previous_headings":"","what":"Map diseases to phecodes via HPO terms — mapDiseaseToPhecode","title":"Map diseases to phecodes via HPO terms — mapDiseaseToPhecode","text":"mapping diseases clinical features, represented phecodes, required calculating phenotype risk scores.","code":""},{"path":"https://phers.hugheylab.org/reference/mapDiseaseToPhecode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map diseases to phecodes via HPO terms — mapDiseaseToPhecode","text":"","code":"mapDiseaseToPhecode(   diseaseHpoMap = phers::diseaseHpoMap,   hpoPhecodeMap = phers::hpoPhecodeMap )"},{"path":"https://phers.hugheylab.org/reference/mapDiseaseToPhecode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map diseases to phecodes via HPO terms — mapDiseaseToPhecode","text":"diseaseHpoMap data.table containing mapping diseases HPO terms. Must columns disease_id term_id. Default map included package. hpoPhecodeMap data.table containing mapping HPO terms phecodes. Must columns term_id phecode. Default map included package.","code":""},{"path":"https://phers.hugheylab.org/reference/mapDiseaseToPhecode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map diseases to phecodes via HPO terms — mapDiseaseToPhecode","text":"data.table columns disease_id phecode.","code":""},{"path":[]},{"path":"https://phers.hugheylab.org/reference/mapDiseaseToPhecode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map diseases to phecodes via HPO terms — mapDiseaseToPhecode","text":"","code":"library('data.table') library('survival')  # map ICD codes to phecodes phecodeOccurrences = getPhecodeOccurrences(icdSample)  # calculate weights using the prevalence method weightsPrev = getWeights(demoSample, phecodeOccurrences)  # calculate weights using the prevalence method # (assign negative weights to those with zero phecode occurrence) weightsPrevNeg = getWeights(   demoSample, phecodeOccurrences, negativeWeights = TRUE)  # calculate weights using the logistic method weightsLogistic = getWeights(   demoSample, phecodeOccurrences, method = 'logistic', methodFormula = ~ sex)  # calculate weights using the loglinear method phecodeOccurrences2 = phecodeOccurrences[, .(   num_occurrences = uniqueN(entry_date)), by = .(person_id, phecode)] weightsLoglinear = getWeights(   demoSample, phecodeOccurrences2, method = 'loglinear', methodFormula = ~ sex)  # calculate weights using the cox method phecodeOccurrences3 = phecodeOccurrences[, .(   first_occurrence_date = min(entry_date)) , by = .(person_id, phecode)] phecodeOccurrences3 = merge(   phecodeOccurrences3, demoSample[, .(person_id, dob)], by = 'person_id') phecodeOccurrences3[,   occurrence_age := as.numeric((first_occurrence_date - dob)/365.25)] #>      person_id phecode first_occurrence_date        dob occurrence_age #>   1:         1     365            2008-02-22 1999-09-03       8.472154 #>   2:         1     366            2006-02-15 1999-09-03       6.454358 #>   3:         1     735            2009-11-05 1999-09-03      10.175097 #>   4:         1   735.1            2009-11-05 1999-09-03      10.175097 #>   5:         2     442            2014-07-06 1995-09-26      18.777409 #>  ---                                                                   #> 252:        49     474            2014-07-25 1999-10-21      14.759346 #> 253:        49   474.2            2014-07-25 1999-10-21      14.759346 #> 254:        49     496            2014-07-25 1999-10-21      14.759346 #> 255:        49   496.3            2014-07-25 1999-10-21      14.759346 #> 256:        49     963            2014-07-25 1999-10-21      14.759346 phecodeOccurrences3[, `:=`(first_occurrence_date = NULL, dob = NULL)] #>      person_id phecode occurrence_age #>   1:         1     365       8.472154 #>   2:         1     366       6.454358 #>   3:         1     735      10.175097 #>   4:         1   735.1      10.175097 #>   5:         2     442      18.777409 #>  ---                                  #> 252:        49     474      14.759346 #> 253:        49   474.2      14.759346 #> 254:        49     496      14.759346 #> 255:        49   496.3      14.759346 #> 256:        49     963      14.759346 demoSample3 = demoSample[, .(   person_id, sex,   first_age = as.numeric((first_visit_date - dob)/365.25),   last_age = as.numeric((last_visit_date - dob)/365.25))] weightsCox = getWeights(   demoSample3, phecodeOccurrences3, method = 'cox', methodFormula = ~ sex) #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Ran out of iterations and did not converge #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Ran out of iterations and did not converge #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.  #> Warning: Loglik converged before variable  1 ; beta may be infinite.   # calculate weights using pre-calculated weights based on data from # Vanderbilt University Medical Center weightsPreCalc = getWeights(   demoSample, phecodeOccurrences, method = 'prevalence_precalc')"},{"path":"https://phers.hugheylab.org/reference/preCalcWeights.html","id":null,"dir":"Reference","previous_headings":"","what":"Pre-calculated weights for calculating phenotype risk scores — preCalcWeights","title":"Pre-calculated weights for calculating phenotype risk scores — preCalcWeights","text":"weights based EHR data Vanderbilt University Medical Center Synthetic Derivative (SD) ICD-phecode map version 1.2 calculated using \"prevalence\" method.","code":""},{"path":"https://phers.hugheylab.org/reference/preCalcWeights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pre-calculated weights for calculating phenotype risk scores — preCalcWeights","text":"","code":"preCalcWeights"},{"path":"https://phers.hugheylab.org/reference/preCalcWeights.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pre-calculated weights for calculating phenotype risk scores — preCalcWeights","text":"data.table following columns: phecode: Character vector phecodes prev: Numeric vector prevalences, .e., fraction subjects SD least one occurrence given phecode w: Numeric vector weights, calculated -log10(prev)","code":""},{"path":[]},{"path":"https://phers.hugheylab.org/news/index.html","id":"phers-100","dir":"Changelog","previous_headings":"","what":"phers 1.0.0","title":"phers 1.0.0","text":"Added methods calculate weights based logistic, log-linear, Cox proportional hazards regression.","code":""},{"path":"https://phers.hugheylab.org/news/index.html","id":"phers-004","dir":"Changelog","previous_headings":"","what":"phers 0.0.4","title":"phers 0.0.4","text":"Updated documentation version hpoPhecodeMap.","code":""},{"path":"https://phers.hugheylab.org/news/index.html","id":"phers-003","dir":"Changelog","previous_headings":"","what":"phers 0.0.3","title":"phers 0.0.3","text":"CRAN release: 2022-05-31 Set better key residual scores table. Switched lm() instead glm() speed. Simplified genetic association table genotypic model. Switched vid variant_id clarity consistency.","code":""},{"path":"https://phers.hugheylab.org/news/index.html","id":"phers-002","dir":"Changelog","previous_headings":"","what":"phers 0.0.2","title":"phers 0.0.2","text":"CRAN release: 2022-05-10 Set keys data.tables.","code":""},{"path":"https://phers.hugheylab.org/news/index.html","id":"phers-001","dir":"Changelog","previous_headings":"","what":"phers 0.0.1","title":"phers 0.0.1","text":"Updated code documentation.","code":""}]
